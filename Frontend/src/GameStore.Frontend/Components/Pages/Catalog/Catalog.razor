@page "/catalog"
@inject GamesClient Client
@inject NavigationManager NavigationManager
@attribute [StreamRendering]

<PageTitle>Game Catalog</PageTitle>

@if (errorList.Count > 0)
{
    <div class="modal-body">
        @foreach (var error in errorList)
        {
            <div class="alert alert-danger">@error</div>
        }
    </div>
}

<div class="row mt-2">
    <div class="col">
        <a class="btn btn-primary" role="button" href="/catalog/editgame">New Game</a>
    </div>
    <div class="col-sm-4">
        <form id="searchGamesForm" method="post" class="d-flex" role="search" @formname="searchGames" data-permanent>
            <AntiforgeryToken />
            <InputText class="form-control me-2" type="search" @bind-Value="NameSearch" onsearch="clearSearch()"
                placeholder="Search..." aria-label="Search" />
            <button class="btn btn-outline-primary" type="submit">Search</button>
        </form>
    </div>
</div>

@if (gamesPage is null || paginationInfo is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped table-bordered table-hover mt-3">
        <thead class="table-dark">
            <th>Image</th>
            <th>Name</th>
            <th>Genre</th>
            <th class="text-end">Price</th>
            <th>Release Date</th>
            <th></th>
        </thead>
        <tbody>
            @foreach (var game in gamesPage.Data)
            {
                <tr>
                    <td style="width: 60px; max-width: 60px;">
                        <img src="@game.ImageUri" alt="@game.Name" style="width: 50px; object-fit: contain;">
                    </td>
                    <td>@game.Name</td>
                    <td>@game.Genre</td>
                    <td class="text-end">$@game.Price</td>
                    <td>@game.ReleaseDate</td>
                    <td>
                        <div class="d-flex">
                            <a class="btn btn-primary me-2" role="button" href="@GameUrl(game.Id)">
                                <i class="bi bi-pencil"></i>
                            </a>
                            <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="@GetDeleteModalId(game)">
                                <i class="bi bi-x-lg"></i>
                            </button>
                        </div>
                        <DeleteGame Game="@game" />
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="row mt-2">
        <div class="col">
            <Pagination PaginationInfo="paginationInfo" />
        </div>
    </div>
}

<form @formname="delete-game-form" @onsubmit="@ConfirmDeleteAsync"></form>

@code {
    private GamesPage? gamesPage;

    PaginationInfo? paginationInfo;

    const int PageSize = 5;

    [SupplyParameterFromQuery]
    public int? Page { get; set; }

    [SupplyParameterFromQuery]
    public string? Name { get; set; }

    [SupplyParameterFromForm]
    public string? NameSearch { get; set; }

    [SupplyParameterFromForm]
    private Guid? GameIdToDelete { get; set; }

    private List<string> errorList = [];

    protected override async Task OnInitializedAsync()
    {
        HandleSearchBox();

        var pageNumber = Page ?? 1;
        gamesPage = await Client.GetGamesAsync(pageNumber, PageSize, Name);
        paginationInfo = new PaginationInfo(pageNumber, gamesPage.TotalPages, Name);
    }

    private static string GameUrl(Guid id) => $"/catalog/editgame/{id}";

    private static string GameCodesUrl(Guid id) => $"/catalog/gamecodes/{id}";

    private string GetDeleteModalId(GameSummary game)
    {
        return $"#{DeleteGame.GetModalId(game)}";
    }

    private void HandleSearchBox()
    {
        if (!string.IsNullOrWhiteSpace(NameSearch))
        {
            // The user submitted a search
            Name = NameSearch;
            Page = 1;
        }
        else if (NameSearch == string.Empty)
        {
            // The user cleared the search box
            Name = null;
            Page = 1;
        }
    }

    private async Task ConfirmDeleteAsync()
    {
        errorList.Clear();
        var result = await Client.DeleteGameAsync(GameIdToDelete!.Value);

        if (result.Succeeded)
        {
            NavigationManager.Refresh();
        }
        else
        {
            errorList = result.Errors;
        }
    }
}

<script>
    function clearSearch()
    {
        var searchform = document.getElementById("searchGamesForm");
        searchform.submit();
    }
</script>